datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role            @default(user)
  accounts      Account[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

model SubscriptionPlan {
  id                 String              @id @default(cuid())
  price              Int
  namePlan           String              @default("Plan estandar")
  durationDaysPlan   Int                 @default(30)
  descriptionPlan    String?
  subscriptionPlanId String
  clients            CreateClientModel[]
}

model CreateClientModel {
  id                 String            @id @default(cuid())
  name               String
  lastname           String
  phone              String
  age                String
  gmail              String
  startPlan          DateTime          @default(now())
  statusPlan         String
  subscriptionPlanId String? // Permitir valores nulos
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id]) // Relaci√≥n opcional
  methodpay          String
  createDateAt       DateTime          @default(now())
  updateDateAt       DateTime          @updatedAt
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  assists            Assists[] 
}

model Assists {
  id        String   @id @default(cuid())
  clientId  String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  client CreateClientModel @relation(fields: [clientId], references: [id], onDelete: Cascade)
  @@index([clientId])
}
