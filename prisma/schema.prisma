datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role                @default(user)
  accounts      Account[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  client        CreateClientModel[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SubscriptionPlan {
  id                 String              @id @default(cuid())
  price              Int
  namePrice          String
  subscriptionPlanId String
  clients            CreateClientModel[]
}

model CreateClientModel {
  id                 String           @id @default(cuid())
  name               String
  lastname           String
  phone              String
  age                String
  gmail              String
  startPlan          DateTime         @default(now())
  statusPlan         String
  subscriptionPlanId String
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  methodpay          String
  createDateAt       DateTime         @default(now())
  updateDateAt       DateTime         @updatedAt
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
